
-----------------------------------------------------------------------------------------------1---------------------------------------------------------------------------------------------------

CREATE OR REPLACE TRIGGER AUDIT_TRANSACTIONS
    BEFORE INSERT OR UPDATE OR DELETE ON  TRANSACTIONS FOR EACH ROW
DECLARE 
    MUSER VARCHAR2(50);
    IPVAL VARCHAR2(50);
    ACT VARCHAR2(20);
    DATETIME TIMESTAMP;
BEGIN
    SELECT USER INTO MUSER FROM DUAL;
    SELECT SYS_CONTEXT('USERENV','IP_ADDRESS') INTO IPVAL  FROM DUAL;
    SELECT  CURRENT_TIMESTAMP INTO DATETIME from dual;
    IF INSERTING THEN
        ACT := 'INSERT';
    ELSIF UPDATING THEN
        ACT:='UPDATE';
    ELSIF DELETING THEN
        ACT:='DELETE';
    END IF;
    INSERT INTO AUDIT_ (ID_AUDIT,DATEANDTIME,TABLE_,RECORD_ID,ACTION,USER_,IP,ACTIVE) 
                        VALUES(:NEW.ID,DATETIME,'TRANSACTIONS',1,ACT,MUSER,IPVAL,'Y');
    dbms_output.put_line(MUSER || '-' || IPVAL || '-' || DATETIME || '-' || ACT );
END;

CREATE OR REPLACE TRIGGER AUDIT_BET_DETAIL
    BEFORE INSERT OR UPDATE OR DELETE ON  BET_DETAIL FOR EACH ROW
DECLARE 
    MUSER VARCHAR2(50);
    IPVAL VARCHAR2(50);
    ACT VARCHAR2(20);
    DATETIME TIMESTAMP;
BEGIN
    SELECT USER INTO MUSER FROM DUAL;
    SELECT SYS_CONTEXT('USERENV','IP_ADDRESS') INTO IPVAL  FROM DUAL;
    SELECT  CURRENT_TIMESTAMP INTO DATETIME from dual;
    IF INSERTING THEN
        ACT := 'INSERT';
    ELSIF UPDATING THEN
        ACT:='UPDATE';
    ELSIF DELETING THEN
        ACT:='DELETE';
    END IF;
    INSERT INTO AUDIT_ (ID_AUDIT,DATEANDTIME,TABLE_,RECORD_ID,ACTION,USER_,IP,ACTIVE) 
                        VALUES(:NEW.ID,DATETIME,'BET_DETAIL',1,ACT,MUSER,IPVAL,'Y');
    dbms_output.put_line(MUSER || '-' || IPVAL || '-' || DATETIME || '-' || ACT );
END;

CREATE OR REPLACE TRIGGER AUDIT_QUOTA_MATCH
    BEFORE INSERT OR UPDATE OR DELETE ON  QUOTA_MATCH FOR EACH ROW
DECLARE 
    MUSER VARCHAR2(50);
    IPVAL VARCHAR2(50);
    ACT VARCHAR2(20);
    DATETIME TIMESTAMP;
BEGIN
    SELECT USER INTO MUSER FROM DUAL;
    SELECT SYS_CONTEXT('USERENV','IP_ADDRESS') INTO IPVAL  FROM DUAL;
    SELECT  CURRENT_TIMESTAMP INTO DATETIME from dual;
    IF INSERTING THEN
        ACT := 'INSERT';
    ELSIF UPDATING THEN
        ACT:='UPDATE';
    ELSIF DELETING THEN
        ACT:='DELETE';
    END IF;
    INSERT INTO AUDIT_ (ID_AUDIT,DATEANDTIME,TABLE_,RECORD_ID,ACTION,USER_,IP,ACTIVE) 
                        VALUES(:NEW.ID,DATETIME,'QUOTA_MATCH',1,ACT,MUSER,IPVAL,'Y');
    dbms_output.put_line(MUSER || '-' || IPVAL || '-' || DATETIME || '-' || ACT );
END;

CREATE OR REPLACE TRIGGER AUDIT_MATCH
    BEFORE INSERT OR UPDATE OR DELETE ON  MATCH_ FOR EACH ROW
DECLARE 
    MUSER VARCHAR2(50);
    IPVAL VARCHAR2(50);
    ACT VARCHAR2(20);
    DATETIME TIMESTAMP;
BEGIN
    SELECT USER INTO MUSER FROM DUAL;
    SELECT SYS_CONTEXT('USERENV','IP_ADDRESS') INTO IPVAL  FROM DUAL;
    SELECT  CURRENT_TIMESTAMP INTO DATETIME from dual;
    IF INSERTING THEN
        ACT := 'INSERT';
    ELSIF UPDATING THEN
        ACT:='UPDATE';
    ELSIF DELETING THEN
        ACT:='DELETE';
    END IF;
    INSERT INTO AUDIT_ (ID_AUDIT,DATEANDTIME,TABLE_,RECORD_ID,ACTION,USER_,IP,ACTIVE) 
                        VALUES(:NEW.ID,DATETIME,'MATCH_',1,ACT,MUSER,IPVAL,'Y');
    dbms_output.put_line(MUSER || '-' || IPVAL || '-' || DATETIME || '-' || ACT );
END;

CREATE OR REPLACE TRIGGER AUDIT_BET_CATEGORY
    BEFORE INSERT OR UPDATE OR DELETE ON  BET_CATEGORY FOR EACH ROW
DECLARE 
    MUSER VARCHAR2(50);
    IPVAL VARCHAR2(50);
    ACT VARCHAR2(20);
    DATETIME TIMESTAMP;
BEGIN
    SELECT USER INTO MUSER FROM DUAL;
    SELECT SYS_CONTEXT('USERENV','IP_ADDRESS') INTO IPVAL  FROM DUAL;
    SELECT  CURRENT_TIMESTAMP INTO DATETIME from dual;
    IF INSERTING THEN
        ACT := 'INSERT';
    ELSIF UPDATING THEN
        ACT:='UPDATE';
    ELSIF DELETING THEN
        ACT:='DELETE';
    END IF;
    INSERT INTO AUDIT_ (ID_AUDIT,DATEANDTIME,TABLE_,RECORD_ID,ACTION,USER_,IP,ACTIVE) 
                        VALUES(:NEW.ID,DATETIME,'BET_CATEGORY',1,ACT,MUSER,IPVAL,'Y');
    dbms_output.put_line(MUSER || '-' || IPVAL || '-' || DATETIME || '-' || ACT );
END;

CREATE OR REPLACE TRIGGER AUDIT_BET
    BEFORE INSERT OR UPDATE OR DELETE ON  BET FOR EACH ROW
DECLARE 
    MUSER VARCHAR2(50);
    IPVAL VARCHAR2(50);
    ACT VARCHAR2(20);
    DATETIME TIMESTAMP;
BEGIN
    SELECT USER INTO MUSER FROM DUAL;
    SELECT SYS_CONTEXT('USERENV','IP_ADDRESS') INTO IPVAL  FROM DUAL;
    SELECT  CURRENT_TIMESTAMP INTO DATETIME from dual;
    IF INSERTING THEN
        ACT := 'INSERT';
    ELSIF UPDATING THEN
        ACT:='UPDATE';
    ELSIF DELETING THEN
        ACT:='DELETE';
    END IF;
    INSERT INTO AUDIT_ (ID_AUDIT,DATEANDTIME,TABLE_,RECORD_ID,ACTION,USER_,IP,ACTIVE) 
                        VALUES(:NEW.ID,DATETIME,'BET',1,ACT,MUSER,IPVAL,'Y');
    dbms_output.put_line(MUSER || '-' || IPVAL || '-' || DATETIME || '-' || ACT );
END;

CREATE OR REPLACE TRIGGER AUDIT_LIMIT_DEPOSIT
    BEFORE INSERT OR UPDATE OR DELETE ON  LIMIT_DEPOSIT FOR EACH ROW
DECLARE 
    MUSER VARCHAR2(50);
    IPVAL VARCHAR2(50);
    ACT VARCHAR2(20);
    DATETIME TIMESTAMP;
BEGIN
    SELECT USER INTO MUSER FROM DUAL;
    SELECT SYS_CONTEXT('USERENV','IP_ADDRESS') INTO IPVAL  FROM DUAL;
    SELECT  CURRENT_TIMESTAMP INTO DATETIME from dual;
    IF INSERTING THEN
        ACT := 'INSERT';
    ELSIF UPDATING THEN
        ACT:='UPDATE';
    ELSIF DELETING THEN
        ACT:='DELETE';
    END IF;
    INSERT INTO AUDIT_ (ID_AUDIT,DATEANDTIME,TABLE_,RECORD_ID,ACTION,USER_,IP,ACTIVE) 
                        VALUES(:NEW.ID,DATETIME,'LIMIT_DEPOSIT',1,ACT,MUSER,IPVAL,'Y');
    dbms_output.put_line(MUSER || '-' || IPVAL || '-' || DATETIME || '-' || ACT );
END;

CREATE OR REPLACE TRIGGER AUDIT_DEPOSIT
    BEFORE INSERT OR UPDATE OR DELETE ON  DEPOSIT FOR EACH ROW
DECLARE 
    MUSER VARCHAR2(50);
    IPVAL VARCHAR2(50);
    ACT VARCHAR2(20);
    DATETIME TIMESTAMP;
BEGIN
    SELECT USER INTO MUSER FROM DUAL;
    SELECT SYS_CONTEXT('USERENV','IP_ADDRESS') INTO IPVAL  FROM DUAL;
    SELECT  CURRENT_TIMESTAMP INTO DATETIME from dual;
    IF INSERTING THEN
        ACT := 'INSERT';
    ELSIF UPDATING THEN
        ACT:='UPDATE';
    ELSIF DELETING THEN
        ACT:='DELETE';
    END IF;
    INSERT INTO AUDIT_ (ID_AUDIT,DATEANDTIME,TABLE_,RECORD_ID,ACTION,USER_,IP,ACTIVE) 
                        VALUES(:NEW.ID,DATETIME,'DEPOSIT',1,ACT,MUSER,IPVAL,'Y');
    dbms_output.put_line(MUSER || '-' || IPVAL || '-' || DATETIME || '-' || ACT );
END;

CREATE OR REPLACE TRIGGER AUDIT_PAYMENT_CLASS
    BEFORE INSERT OR UPDATE OR DELETE ON  PAYMENT_CLASS FOR EACH ROW
DECLARE 
    MUSER VARCHAR2(50);
    IPVAL VARCHAR2(50);
    ACT VARCHAR2(20);
    DATETIME TIMESTAMP;
BEGIN
    SELECT USER INTO MUSER FROM DUAL;
    SELECT SYS_CONTEXT('USERENV','IP_ADDRESS') INTO IPVAL  FROM DUAL;
    SELECT  CURRENT_TIMESTAMP INTO DATETIME from dual;
    IF INSERTING THEN
        ACT := 'INSERT';
    ELSIF UPDATING THEN
        ACT:='UPDATE';
    ELSIF DELETING THEN
        ACT:='DELETE';
    END IF;
    INSERT INTO AUDIT_ (ID_AUDIT,DATEANDTIME,TABLE_,RECORD_ID,ACTION,USER_,IP,ACTIVE) 
                        VALUES(:NEW.ID,DATETIME,'PAYMENT_CLASS',1,ACT,MUSER,IPVAL,'Y');
    dbms_output.put_line(MUSER || '-' || IPVAL || '-' || DATETIME || '-' || ACT );
END;

CREATE OR REPLACE TRIGGER AUDIT_PREFERENCES
    BEFORE INSERT OR UPDATE OR DELETE ON  PREFERENCES FOR EACH ROW
DECLARE 
    MUSER VARCHAR2(50);
    IPVAL VARCHAR2(50);
    ACT VARCHAR2(20);
    DATETIME TIMESTAMP;
BEGIN
    SELECT USER INTO MUSER FROM DUAL;
    SELECT SYS_CONTEXT('USERENV','IP_ADDRESS') INTO IPVAL  FROM DUAL;
    SELECT  CURRENT_TIMESTAMP INTO DATETIME from dual;
    IF INSERTING THEN
        ACT := 'INSERT';
    ELSIF UPDATING THEN
        ACT:='UPDATE';
    ELSIF DELETING THEN
        ACT:='DELETE';
    END IF;
    INSERT INTO AUDIT_ (ID_AUDIT,DATEANDTIME,TABLE_,RECORD_ID,ACTION,USER_,IP,ACTIVE) 
                        VALUES(:NEW.ID,DATETIME,'PREFERENCES',1,ACT,MUSER,IPVAL,'Y');
    dbms_output.put_line(MUSER || '-' || IPVAL || '-' || DATETIME || '-' || ACT );
END;

CREATE OR REPLACE TRIGGER AUDIT_BONUS
    BEFORE INSERT OR UPDATE OR DELETE ON  BONUS FOR EACH ROW
DECLARE 
    MUSER VARCHAR2(50);
    IPVAL VARCHAR2(50);
    ACT VARCHAR2(20);
    DATETIME TIMESTAMP;
BEGIN
    SELECT USER INTO MUSER FROM DUAL;
    SELECT SYS_CONTEXT('USERENV','IP_ADDRESS') INTO IPVAL  FROM DUAL;
    SELECT  CURRENT_TIMESTAMP INTO DATETIME from dual;
    IF INSERTING THEN
        ACT := 'INSERT';
    ELSIF UPDATING THEN
        ACT:='UPDATE';
    ELSIF DELETING THEN
        ACT:='DELETE';
    END IF;
    INSERT INTO AUDIT_ (ID_AUDIT,DATEANDTIME,TABLE_,RECORD_ID,ACTION,USER_,IP,ACTIVE) 
                        VALUES(:NEW.ID,DATETIME,'BONUS',1,ACT,MUSER,IPVAL,'Y');
    dbms_output.put_line(MUSER || '-' || IPVAL || '-' || DATETIME || '-' || ACT );
END;

CREATE OR REPLACE TRIGGER AUDIT_PROOF
    BEFORE INSERT OR UPDATE OR DELETE ON  PROOF FOR EACH ROW
DECLARE 
    MUSER VARCHAR2(50);
    IPVAL VARCHAR2(50);
    ACT VARCHAR2(20);
    DATETIME TIMESTAMP;
BEGIN
    SELECT USER INTO MUSER FROM DUAL;
    SELECT SYS_CONTEXT('USERENV','IP_ADDRESS') INTO IPVAL  FROM DUAL;
    SELECT  CURRENT_TIMESTAMP INTO DATETIME from dual;
    IF INSERTING THEN
        ACT := 'INSERT';
    ELSIF UPDATING THEN
        ACT:='UPDATE';
    ELSIF DELETING THEN
        ACT:='DELETE';
    END IF;
    INSERT INTO AUDIT_ (ID_AUDIT,DATEANDTIME,TABLE_,RECORD_ID,ACTION,USER_,IP,ACTIVE) 
                        VALUES(:NEW.ID,DATETIME,'PROOF',1,ACT,MUSER,IPVAL,'Y');
    dbms_output.put_line(MUSER || '-' || IPVAL || '-' || DATETIME || '-' || ACT );
END;

CREATE OR REPLACE TRIGGER AUDIT_WITHDRAW
    BEFORE INSERT OR UPDATE OR DELETE ON  WITHDRAW FOR EACH ROW
DECLARE 
    MUSER VARCHAR2(50);
    IPVAL VARCHAR2(50);
    ACT VARCHAR2(20);
    DATETIME TIMESTAMP;
BEGIN
    SELECT USER INTO MUSER FROM DUAL;
    SELECT SYS_CONTEXT('USERENV','IP_ADDRESS') INTO IPVAL  FROM DUAL;
    SELECT  CURRENT_TIMESTAMP INTO DATETIME from dual;
    IF INSERTING THEN
        ACT := 'INSERT';
    ELSIF UPDATING THEN
        ACT:='UPDATE';
    ELSIF DELETING THEN
        ACT:='DELETE';
    END IF;
    INSERT INTO AUDIT_ (ID_AUDIT,DATEANDTIME,TABLE_,RECORD_ID,ACTION,USER_,IP,ACTIVE) 
                        VALUES(:NEW.ID,DATETIME,'WITHDRAW',1,ACT,MUSER,IPVAL,'Y');
    dbms_output.put_line(MUSER || '-' || IPVAL || '-' || DATETIME || '-' || ACT );
END;

CREATE OR REPLACE TRIGGER AUDIT_LOGIN
    BEFORE INSERT OR UPDATE OR DELETE ON  LOGIN FOR EACH ROW
DECLARE 
    MUSER VARCHAR2(50);
    IPVAL VARCHAR2(50);
    ACT VARCHAR2(20);
    DATETIME TIMESTAMP;
BEGIN
    SELECT USER INTO MUSER FROM DUAL;
    SELECT SYS_CONTEXT('USERENV','IP_ADDRESS') INTO IPVAL  FROM DUAL;
    SELECT  CURRENT_TIMESTAMP INTO DATETIME from dual;
    IF INSERTING THEN
        ACT := 'INSERT';
    ELSIF UPDATING THEN
        ACT:='UPDATE';
    ELSIF DELETING THEN
        ACT:='DELETE';
    END IF;
    INSERT INTO AUDIT_ (ID_AUDIT,DATEANDTIME,TABLE_,RECORD_ID,ACTION,USER_,IP,ACTIVE) 
                        VALUES(:NEW.ID,DATETIME,'LOGIN',1,ACT,MUSER,IPVAL,'Y');
    dbms_output.put_line(MUSER || '-' || IPVAL || '-' || DATETIME || '-' || ACT );
END;

CREATE OR REPLACE TRIGGER AUDIT_DATAUSER
    BEFORE INSERT OR UPDATE OR DELETE ON  DATAUSER FOR EACH ROW
DECLARE 
    MUSER VARCHAR2(50);
    IPVAL VARCHAR2(50);
    ACT VARCHAR2(20);
    DATETIME TIMESTAMP;
BEGIN
    SELECT USER INTO MUSER FROM DUAL;
    SELECT SYS_CONTEXT('USERENV','IP_ADDRESS') INTO IPVAL  FROM DUAL;
    SELECT  CURRENT_TIMESTAMP INTO DATETIME from dual;
    IF INSERTING THEN
        ACT := 'INSERT';
    ELSIF UPDATING THEN
        ACT:='UPDATE';
    ELSIF DELETING THEN
        ACT:='DELETE';
    END IF;
    INSERT INTO AUDIT_ (ID_AUDIT,DATEANDTIME,TABLE_,RECORD_ID,ACTION,USER_,IP,ACTIVE) 
                        VALUES(:NEW.ID,DATETIME,'DATAUSER',1,ACT,MUSER,IPVAL,'Y');
    dbms_output.put_line(MUSER || '-' || IPVAL || '-' || DATETIME || '-' || ACT );
END;

CREATE OR REPLACE TRIGGER AUDIT_DOCUMENT_USER
    BEFORE INSERT OR UPDATE OR DELETE ON  DOCUMENT_USER FOR EACH ROW
DECLARE 
    MUSER VARCHAR2(50);
    IPVAL VARCHAR2(50);
    ACT VARCHAR2(20);
    DATETIME TIMESTAMP;
BEGIN
    SELECT USER INTO MUSER FROM DUAL;
    SELECT SYS_CONTEXT('USERENV','IP_ADDRESS') INTO IPVAL  FROM DUAL;
    SELECT  CURRENT_TIMESTAMP INTO DATETIME from dual;
    IF INSERTING THEN
        ACT := 'INSERT';
    ELSIF UPDATING THEN
        ACT:='UPDATE';
    ELSIF DELETING THEN
        ACT:='DELETE';
    END IF;
    INSERT INTO AUDIT_ (ID_AUDIT,DATEANDTIME,TABLE_,RECORD_ID,ACTION,USER_,IP,ACTIVE) 
                        VALUES(:NEW.ID,DATETIME,'DOCUMENT_USER',1,ACT,MUSER,IPVAL,'Y');
    dbms_output.put_line(MUSER || '-' || IPVAL || '-' || DATETIME || '-' || ACT );
END;

CREATE OR REPLACE TRIGGER AUDIT_CITY
    BEFORE INSERT OR UPDATE OR DELETE ON  CITY FOR EACH ROW
DECLARE 
    MUSER VARCHAR2(50);
    IPVAL VARCHAR2(50);
    ACT VARCHAR2(20);
    DATETIME TIMESTAMP;
BEGIN
    SELECT USER INTO MUSER FROM DUAL;
    SELECT SYS_CONTEXT('USERENV','IP_ADDRESS') INTO IPVAL  FROM DUAL;
    SELECT  CURRENT_TIMESTAMP INTO DATETIME from dual;
    IF INSERTING THEN
        ACT := 'INSERT';
    ELSIF UPDATING THEN
        ACT:='UPDATE';
    ELSIF DELETING THEN
        ACT:='DELETE';
    END IF;
    INSERT INTO AUDIT_ (ID_AUDIT,DATEANDTIME,TABLE_,RECORD_ID,ACTION,USER_,IP,ACTIVE) 
                        VALUES(:NEW.ID,DATETIME,'CITY',1,ACT,MUSER,IPVAL,'Y');
    dbms_output.put_line(MUSER || '-' || IPVAL || '-' || DATETIME || '-' || ACT );
END;

CREATE OR REPLACE TRIGGER AUDIT_DEPARTMENT
    BEFORE INSERT OR UPDATE OR DELETE ON  DEPARTMENT FOR EACH ROW
DECLARE 
    MUSER VARCHAR2(50);
    IPVAL VARCHAR2(50);
    ACT VARCHAR2(20);
    DATETIME TIMESTAMP;
BEGIN
    SELECT USER INTO MUSER FROM DUAL;
    SELECT SYS_CONTEXT('USERENV','IP_ADDRESS') INTO IPVAL  FROM DUAL;
    SELECT  CURRENT_TIMESTAMP INTO DATETIME from dual;
    IF INSERTING THEN
        ACT := 'INSERT';
    ELSIF UPDATING THEN
        ACT:='UPDATE';
    ELSIF DELETING THEN
        ACT:='DELETE';
    END IF;
    INSERT INTO AUDIT_ (ID_AUDIT,DATEANDTIME,TABLE_,RECORD_ID,ACTION,USER_,IP,ACTIVE) 
                        VALUES(:NEW.ID,DATETIME,'DEPARTMENT',1,ACT,MUSER,IPVAL,'Y');
    dbms_output.put_line(MUSER || '-' || IPVAL || '-' || DATETIME || '-' || ACT );
END;

CREATE OR REPLACE TRIGGER AUDIT_COUNTRY
    BEFORE INSERT OR UPDATE OR DELETE ON  COUNTRY FOR EACH ROW
DECLARE 
    MUSER VARCHAR2(50);
    IPVAL VARCHAR2(50);
    ACT VARCHAR2(20);
    DATETIME TIMESTAMP;
BEGIN
    SELECT USER INTO MUSER FROM DUAL;
    SELECT SYS_CONTEXT('USERENV','IP_ADDRESS') INTO IPVAL  FROM DUAL;
    SELECT  CURRENT_TIMESTAMP INTO DATETIME from dual;
    IF INSERTING THEN
        ACT := 'INSERT';
    ELSIF UPDATING THEN
        ACT:='UPDATE';
    ELSIF DELETING THEN
        ACT:='DELETE';
    END IF;
    INSERT INTO AUDIT_ (ID_AUDIT,DATEANDTIME,TABLE_,RECORD_ID,ACTION,USER_,IP,ACTIVE) 
                        VALUES(:NEW.ID,DATETIME,'COUNTRY',1,ACT,MUSER,IPVAL,'Y');
    dbms_output.put_line(MUSER || '-' || IPVAL || '-' || DATETIME || '-' || ACT );
END;

-----------------------------------------------------------------------------------------------2---------------------------------------------------------------------------------------------------


CREATE OR REPLACE TRIGGER UPDATE_BALANCE_DEPOSITS BEFORE INSERT OR UPDATE ON DEPOSIT FOR EACH ROW WHEN (NEW.STATUS = 'EXITOSO') 
DECLARE
    ACTUAL_BALANCE FLOAT;
    NEW_BALANCE FLOAT;
    NEW_DEPOSIT_VALUE FLOAT ;
    USER_ID INT;
BEGIN
    
    USER_ID := :NEW.FK_USER;
    NEW_DEPOSIT_VALUE := :NEW.DEPOSIT_VALUE;
    SELECT BALANCE INTO ACTUAL_BALANCE FROM DATAUSER WHERE ID_USER = USER_ID;
    NEW_BALANCE := ACTUAL_BALANCE + NEW_DEPOSIT_VALUE;
    
    UPDATE DATAUSER SET BALANCE = NEW_BALANCE WHERE ID_USER = USER_ID;
END;

CREATE OR REPLACE TRIGGER UPDATE_BALANCE_WITHDRAW BEFORE INSERT OR UPDATE ON WITHDRAW FOR EACH ROW WHEN (NEW.APPROVED = 'Y') 
DECLARE
    ACTUAL_BALANCE FLOAT ;
    NEW_BALANCE FLOAT;
    NEW_WITHDRAW_VALUE FLOAT;
    USER_ID INT;
BEGIN
    
    USER_ID := :NEW.FK_USER;
    NEW_WITHDRAW_VALUE := :NEW.WITHDRAW_VALUE;
    SELECT BALANCE INTO ACTUAL_BALANCE FROM DATAUSER WHERE ID_USER = USER_ID;
    NEW_BALANCE := ACTUAL_BALANCE - NEW_WITHDRAW_VALUE;
    
    UPDATE DATAUSER SET BALANCE = NEW_BALANCE WHERE ID_USER = USER_ID;
END;

CREATE OR REPLACE TRIGGER UPDATE_BALANCE_BET BEFORE INSERT OR UPDATE ON BET FOR EACH ROW WHEN (NEW.STATUS = 'GANADA') 
DECLARE
    ACTUAL_BALANCE FLOAT ;
    NEW_BALANCE FLOAT;
    NEW_TOTAL_PROFIT FLOAT;
    USER_ID INT;
BEGIN
    
    USER_ID := :NEW.FK_DATAUSER;
    NEW_TOTAL_PROFIT := :NEW.TOTAL_PROFIT;
    SELECT BALANCE INTO ACTUAL_BALANCE FROM DATAUSER WHERE ID_USER = USER_ID;
    NEW_BALANCE := ACTUAL_BALANCE + NEW_TOTAL_PROFIT;
    
    UPDATE DATAUSER SET BALANCE = NEW_BALANCE WHERE ID_USER = USER_ID;
END;

--------------------------------------------------------------------------------------------------------------------------------------------3-----------------------------------------------------------------------------------------------------------

CREATE OR REPLACE TRIGGER UPDATE_END_MATCH
BEFORE INSERT OR UPDATE OF STATUS ON MATCH_  
FOR EACH ROW 
WHEN( NEW.STATUS = 'FINALIZADO')
DECLARE
    dato number;
BEGIN
     END_MATCH;
    dbms_output.put_line('hecho' );
END;

--------------------------------------------------------------------------------------------------------------------------------------------4-----------------------------------------------------------------------------------------------------------

CREATE OR REPLACE TRIGGER UPDATE_TOTAL_VALUE_BET BEFORE INSERT OR UPDATE ON BET_DETAIL FOR EACH ROW 
DECLARE
    ACTUAL_BET_VALUE FLOAT ;
    NEW_VALUE_BET FLOAT;
    TOTAL_VALUE_BET FLOAT;
    FINAL_TOTAL_VALE FLOAT;
    BET_ID INT;
BEGIN
    
    BET_ID := :NEW.FK_BET;
    NEW_VALUE_BET := :NEW.BET_VALUE;
    SELECT TOTAL_VALUE INTO TOTAL_VALUE_BET FROM BET WHERE ID_BET = BET_ID;
    FINAL_TOTAL_VALE := TOTAL_VALUE_BET + NEW_VALUE_BET;
    
    UPDATE BET SET TOTAL_VALUE = FINAL_TOTAL_VALE WHERE ID_BET = BET_ID;
END;



     