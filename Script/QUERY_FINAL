GRANT UNLIMITED TABLESPACE TO GISDBA;
SELECT * FROM USER_USERS;
SELECT * FROM USER_USERS;
GRANT
CREATE TABLE TO GISDBA

--TABLAS
CREATE TABLE COUNTRY
  (
    ID           INT GENERATED ALWAYS AS IDENTITY,
    ID_COUNTRY   NUMBER(10) PRIMARY KEY NOT NULL,
    COUNTRY_NAME VARCHAR2(100) NOT NULL,
    ACTIVE       VARCHAR2(1) NOT NULL,
    PREFIX       VARCHAR2(4)
  )
  TABLESPACE BET_ITM;
INSERT
INTO COUNTRY
  (
    ID_COUNTRY,
    COUNTRY_NAME,
    ACTIVE,
    PREFIX
  )
  VALUES
  (
    1,
    'COLOMBIA',
    'Y',
    '54'
  ) ;
SELECT * FROM COUNTRY;

CREATE TABLE DEPARTMENT
  (
    ID              INT GENERATED ALWAYS AS IDENTITY,
    ID_DEPARTMENT   NUMBER(10) NOT NULL,
    DEPARTMENT_NAME VARCHAR2(100) NOT NULL,
    ACTIVE          VARCHAR2(1) NOT NULL,
    FK_COUNTRY      INT NOT NULL,
    CONSTRAINT PK_ID_DEPARTMENT PRIMARY KEY (ID_DEPARTMENT),
    FOREIGN KEY (FK_COUNTRY) REFERENCES COUNTRY (ID_COUNTRY)
  )
  TABLESPACE BET_ITM ;
INSERT
INTO DEPARTMENT
  (
    ID_DEPARTMENT,
    DEPARTMENT_NAME,
    ACTIVE,
    FK_COUNTRY
  )
  VALUES
  (
    1,
    'ANTIOQUIA',
    'Y',
    '1'
  ) ;
SELECT * FROM DEPARTMENT;

CREATE TABLE CITY
  (
    ID            INT GENERATED ALWAYS AS IDENTITY,
    ID_CITY       NUMBER(10) NOT NULL,
    CITY_NAME     VARCHAR2(100) NOT NULL,
    ACTIVE        VARCHAR2(1) NOT NULL,
    FK_DEPARTMENT INT NOT NULL,
    CONSTRAINT PK_ID_CITY PRIMARY KEY (ID_CITY),
    FOREIGN KEY (FK_DEPARTMENT) REFERENCES DEPARTMENT (ID_DEPARTMENT)
  )
  TABLESPACE BET_ITM;
INSERT
INTO CITY
  (
    ID_CITY,
    CITY_NAME,
    ACTIVE,
    FK_DEPARTMENT
  )
  VALUES
  (
    1,
    'MEDELLIN',
    'Y',
    '1'
  ) ;
SELECT * FROM CITY;

CREATE TABLE DOCUMENT_USER
  (
    ID          INT GENERATED ALWAYS AS IDENTITY,
    ID_DOCUMENT NUMBER(10) NOT NULL,
    FIRSTNAME   VARCHAR2(30)NOT NULL,
    LASTNAME    VARCHAR2(30)NOT NULL,
    GENDER      VARCHAR2(10) NOT NULL,
    CONSTRAINT VALIDATE_GENDER CHECK(GENDER = 'SEÑOR'
  OR GENDER                                 = 'SEÑORA'),
    DOCUMENT_NUMBER  NUMBER(10) NOT NULL,
    ISSUE_PLACE      VARCHAR2(20) NOT NULL,
    ISSUE_DATE       TIMESTAMP NOT NULL,
    NATIONALITY      VARCHAR2(20) NOT NULL,
    BIRTHDAY         TIMESTAMP NOT NULL,
    EMAIL            VARCHAR2(100) NOT NULL,
    PASSWORDUSER     VARCHAR2(100) NOT NULL,
    ADDRESS_HOUSE    VARCHAR2(100) NOT NULL,
    DEPARTMENT_HOUSE INT NOT NULL,
    FK_CITY          INT NOT NULL,
    POSTAL_CODE      VARCHAR2(10) NOT NULL,
    ADDRESS_HOUSE2   VARCHAR2(100),
    CELLPHONE        VARCHAR2(20)NOT NULL,
    ACTIVE           VARCHAR2(1) NOT NULL,
    DEPARTMENT       INT NOT NULL,
    CONSTRAINT PK_ID_DOCUMENT PRIMARY KEY (ID_DOCUMENT),
    FOREIGN KEY (FK_CITY) REFERENCES CITY (ID_CITY)
  )
  TABLESPACE BET_ITM ;
INSERT
INTO DOCUMENT_USER
  (
    ID_DOCUMENT,
    FIRSTNAME,
    LASTNAME,
    GENDER,
    DOCUMENT_NUMBER,
    ISSUE_PLACE,
    ISSUE_DATE,
    NATIONALITY,
    BIRTHDAY,
    EMAIL,
    PASSWORDUSER,
    ADDRESS_HOUSE,
    DEPARTMENT_HOUSE,
    FK_CITY,
    POSTAL_CODE,
    ADDRESS_HOUSE2,
    CELLPHONE,
    ACTIVE,
    DEPARTMENT
  )
  VALUES
  (
    1,
    'CARLOS',
    'ROCKEFELLER',
    'SEÑOR',
    '1023432143',
    'MEDELLIN',
    '12-04-2010',
    'COLOMBIANO',
    '14-11-1995',
    'DARKSOUL@HOTMAIL.COM',
    '123456',
    'CARRERA 4 #23-12',
    1,1,
    '050022',
    'CALLE 4N #98-100',
    '3004535876',
    'Y',
    1
  ) ;
SELECT * FROM DOCUMENT_USER;

CREATE TABLE DATAUSER
  (
    ID      INT GENERATED ALWAYS AS IDENTITY,
    ID_USER NUMBER(10) NOT NULL,
    BALANCE FLOAT NOT NULL,
    BANK_ACCOUNT VARCHAR2(50)NOT NULL,
    STATUS       VARCHAR2(1) NOT NULL,
    ACTIVE       VARCHAR2(1) NOT NULL,
    FK_DOCUMENT  INT NOT NULL,
    CONSTRAINT PK_ID_USER PRIMARY KEY (ID_USER),
    FOREIGN KEY (FK_DOCUMENT) REFERENCES DOCUMENT_USER (ID_DOCUMENT)
  )
  TABLESPACE BET_ITM;
INSERT
INTO DATAUSER
  (
    ID_USER,
    BALANCE,
    BANK_ACCOUNT,
    STATUS,
    ACTIVE,
    FK_DOCUMENT
  )
  VALUES
  (
    1,520000,
    '654321987',
    'A',
    'Y',
    '1'
  ) ;
SELECT * FROM DATAUSER;

CREATE TABLE LOGIN
  (
    ID           INT GENERATED ALWAYS AS IDENTITY,
    ID_LOGIN     NUMBER(10) NOT NULL,
    INITIAL_HOUR TIMESTAMP,
    END_HOUR     TIMESTAMP,
    CONSTRAINT CK_MAY_END_HOUR CHECK(END_HOUR > INITIAL_HOUR),
    CLOSE_SESSION INT NOT NULL,
    STATUS        VARCHAR2(1) NOT NULL,
    ACTIVE        VARCHAR2(1) NOT NULL,
    FK_USER       INT NOT NULL,
    CONSTRAINT PK_ID_LOGIN PRIMARY KEY (ID_LOGIN),
    FOREIGN KEY (FK_USER) REFERENCES DATAUSER (ID_USER)
  )
  TABLESPACE BET_ITM;
INSERT
INTO LOGIN
  (
    ID_LOGIN,
    INITIAL_HOUR,
    END_HOUR,
    CLOSE_SESSION,
    STATUS,
    ACTIVE,
    FK_USER
  )
  VALUES
  (
    1,
    '11/04/2019 04:23',
    '11/04/2019 11:12',
    4 ,
    'Y',
    'A',
    '1'
  ) ;
SELECT * FROM LOGIN;

CREATE TABLE WITHDRAW
  (
    ID            INT GENERATED ALWAYS AS IDENTITY,
    ID_WITHDRAW   NUMBER(10) NOT NULL,
    DATE_WITHDRAW TIMESTAMP NOT NULL,
    DATE_OUTLAY   TIMESTAMP NOT NULL,
    CONSTRAINT CK_VALIDATING_DATE CHECK(DATE_OUTLAY >= DATE_WITHDRAW),
    APPROVED VARCHAR2(1) NOT NULL,
    ACTIVE   VARCHAR2(1) NOT NULL,
    FK_USER  INT NOT NULL,
    CONSTRAINT PK_ID_WITHDRAW PRIMARY KEY (ID_WITHDRAW),
    FOREIGN KEY (FK_USER) REFERENCES DATAUSER (ID_USER)
  )
  TABLESPACE BET_ITM;
INSERT
INTO WITHDRAW
  (
    ID_WITHDRAW,
    DATE_WITHDRAW,
    DATE_OUTLAY,
    APPROVED,
    ACTIVE,
    FK_USER
  )
  VALUES
  (
    1,
    '20-11-2015',
    '21-11-2015',
    'Y',
    'Y',
    '1'
  ) ;
SELECT * FROM WITHDRAW;

CREATE TABLE PROOF
  (
    ID          INT GENERATED ALWAYS AS IDENTITY,
    ID_PROOF    NUMBER(10) NOT NULL,
    NAME_PROOF  VARCHAR2(100) NOT NULL,
    PHOTO       VARCHAR2(500) NOT NULL,
    APPROVED    VARCHAR2(1) NOT NULL,
    ACTIVE      VARCHAR2(1) NOT NULL,
    FK_WITHDRAW INT NOT NULL,
    CONSTRAINT PK_ID_PROOF PRIMARY KEY (ID_PROOF),
    FOREIGN KEY (FK_WITHDRAW) REFERENCES WITHDRAW (ID_WITHDRAW)
  )
  TABLESPACE BET_ITM;
INSERT
INTO PROOF
  (
    ID_PROOF,
    NAME_PROOF,
    PHOTO,
    APPROVED,
    ACTIVE,
    FK_WITHDRAW
  )
  VALUES
  (
    1,
    'SERVICIOS PUBLICOS',
    'http://www.grupo-epm.com/site/portals/21/Imagenes/Noticias/cuentame-nueva-factura.jpg',
    'Y',
    'Y',
    '1'
  ) ;
SELECT * FROM PROOF;

CREATE TABLE BONUS
  (
    ID       INT GENERATED ALWAYS AS IDENTITY,
    ID_BONUS NUMBER(10) NOT NULL,
    CODE     VARCHAR2(100) NOT NULL,
    VALIDITY TIMESTAMP NOT NULL,
    APPROVED VARCHAR2(1) NOT NULL,
    ACTIVE   VARCHAR2(1) NOT NULL,
    FK_USER  INT NOT NULL,
    CONSTRAINT PK_ID_BONUS PRIMARY KEY (ID_BONUS),
    FOREIGN KEY (FK_USER) REFERENCES DATAUSER (ID_USER)
  )
  TABLESPACE BET_ITM;
INSERT
INTO BONUS
  (
    ID_BONUS,
    CODE,
    VALIDITY,
    APPROVED,
    ACTIVE,
    FK_USER
  )
  VALUES
  (
    1,
    '5#5XCSDFGGF/%$FBDoirty',
    '23-07-2017',
    'Y',
    'Y',
    '1'
  ) ;
SELECT * FROM BONUS;

CREATE TABLE PREFERENCES
  (
    ID              INT GENERATED ALWAYS AS IDENTITY,
    ID_PREFERENCES  NUMBER(10) NOT NULL,
    NAME_PREFERENCE VARCHAR2(100) NOT NULL,
    CONSTRAINT CK_VALIDATE_PREFERENCES CHECK(NAME_PREFERENCE = 'BOLETIN INFORMATIVO'
  OR NAME_PREFERENCE                                         = 'BOLETIN INFORMATIVO'
  OR NAME_PREFERENCE                                         = 'CORREOS DE APUESTAS DEPORTIVAS'
  OR NAME_PREFERENCE                                         = 'ENVIO DE SMS'
  OR NAME_PREFERENCE                                         = 'NOTIFICACIONES DEL NAVEGADOR'
  OR NAME_PREFERENCE                                         = 'AVISO DE BOLETO DE APUESTA' ),
    APPROVED VARCHAR2(1) NOT NULL,
    ACTIVE   VARCHAR2(1) NOT NULL,
    FK_USER  INT NOT NULL,
    CONSTRAINT PK_ID_PREFERENCES PRIMARY KEY (ID_PREFERENCES),
    FOREIGN KEY (FK_USER) REFERENCES DATAUSER (ID_USER)
  )
  TABLESPACE BET_ITM;
INSERT
INTO PREFERENCES
  (
    ID_PREFERENCES,
    NAME_PREFERENCE,
    APPROVED,
    ACTIVE,
    FK_USER
  )
  VALUES
  (
    1,
    'ENVIO DE SMS',
    'Y',
    'Y',
    '1'
  ) ;
SELECT * FROM PREFERENCES;

CREATE TABLE PAYMENT_CLASS
  (
    ID           INT GENERATED ALWAYS AS IDENTITY,
    ID_PAY_CLASS NUMBER(10) PRIMARY KEY NOT NULL,
    NAME_PAYMENT VARCHAR2(100) NOT NULL,
    CONSTRAINT CK_NAME_PAYMENT CHECK(NAME_PAYMENT = 'VISA-MASTERCARD'
  OR NAME_PAYMENT                                 = 'BALOTO'
  OR NAME_PAYMENT                                 = 'PSE'
  OR NAME_PAYMENT                                 = 'EFECTY'
  OR NAME_PAYMENT                                 = 'DIMONEX' ),
    MINIMUM_VALUE FLOAT NOT NULL,
    CONSTRAINT CK_VALIDATE_MINIMUM_VALUE CHECK(MINIMUM_VALUE >=0
  AND MINIMUM_VALUE                                          <= MAXIIMUM_VALUE),
    MAXIIMUM_VALUE FLOAT NOT NULL,
    CONSTRAINT CK_MAY_MINIMUM_VALUE CHECK(MAXIIMUM_VALUE > MINIMUM_VALUE),
    ACTIVE VARCHAR2(1) NOT NULL
  )
  TABLESPACE BET_ITM;
INSERT
INTO PAYMENT_CLASS
  (
    ID_PAY_CLASS,
    NAME_PAYMENT,
    MINIMUM_VALUE,
    MAXIIMUM_VALUE,
    ACTIVE
  )
  VALUES
  (
    1,
    'BALOTO',
    350000,
    600000,
    'Y'
  ) ;
SELECT * FROM PAYMENT_CLASS;

CREATE TABLE DEPOSIT
  (
    ID               INT GENERATED ALWAYS AS IDENTITY,
    ID_DEPOSIT       NUMBER(10) NOT NULL,
    TRANSACTION_DATE TIMESTAMP NOT NULL,
    STATUS           VARCHAR2(50) NOT NULL,
    CONSTRAINT CK_STATUS CHECK(STATUS = 'PENDIENTE'
  OR STATUS                           = 'EN PROCESO'
  OR STATUS                           = 'RECHAZADA'
  OR STATUS                           = 'EXITOSO'),
    ACTIVE         VARCHAR2(1) NOT NULL,
    FK_USER        INT NOT NULL,
    FK_PAY_CLASS   INT NOT NULL,
    FK_TRANSACTION NUMBER,
    CONSTRAINT PK_ID_DEPOSIT PRIMARY KEY (ID_DEPOSIT),
    FOREIGN KEY (FK_USER) REFERENCES DATAUSER (ID_USER),
    FOREIGN KEY (FK_PAY_CLASS) REFERENCES PAYMENT_CLASS (ID_PAY_CLASS),
    FOREIGN KEY (FK_TRANSACTION) REFERENCES TRANSACTIONS (ID_TRANSACTIONS)--COLUMNA AGREGADA
  )
  TABLESPACE BET_ITM;
INSERT
INTO DEPOSIT
  (
    ID_DEPOSIT,
    TRANSACTION_DATE,
    STATUS,
    ACTIVE,
    FK_USER,
    FK_PAY_CLASS
  )
  VALUES
  (
    1,
    '20-12-2018',
    'PENDIENTE',
    'Y',
    '1',
    '1'
  ) ;
SELECT * FROM DEPOSIT;

CREATE TABLE LIMIT_DEPOSIT
  (
    ID               INT generated always AS identity,
    ID_LIMIT_DEPOSIT NUMBER(10) NOT NULL,
    MAXIMUM_DAILY FLOAT,
    CONSTRAINT CK_DAILY_NOT_ZERO CHECK(MAXIMUM_DAILY >0 ),
    CONSTRAINT CK_DAILY_MINOR CHECK(MAXIMUM_DAILY    < MAXIMUM_MONTHLY
  AND MAXIMUM_DAILY                                  < MAXIMUM_WEEKLY),
    MAXIMUM_WEEKLY FLOAT ,
    CONSTRAINT CK_WEEKLY_NOT_ZERO CHECK(MAXIMUM_WEEKLY>0),
    CONSTRAINT CK_WEEKLY_MINOR CHECK(MAXIMUM_WEEKLY   < MAXIMUM_MONTHLY
  AND MAXIMUM_WEEKLY                                  > MAXIMUM_DAILY),
    MAXIMUM_MONTHLY FLOAT,
    CONSTRAINT CK_MONTHLY_NOT_ZERO CHECK(MAXIMUM_MONTHLY>0),
    CONSTRAINT CK_MONTHLY_GREATER CHECK(MAXIMUM_MONTHLY > MAXIMUM_WEEKLY
  AND MAXIMUM_MONTHLY                                   > MAXIMUM_DAILY),
    ACTIVE      VARCHAR2(1) NOT NULL,
    UPDATE_DATE TIMESTAMP NOT NULL,
    FK_DATAUSER INT,
    CONSTRAINT PK_ID_LIMIT_DEPOSIT PRIMARY KEY (ID_LIMIT_DEPOSIT),
    FOREIGN KEY (FK_DATAUSER) REFERENCES DATAUSER (ID_USER)
  )
  TABLESPACE BET_ITM;
INSERT
INTO LIMIT_DEPOSIT
  (
    ID_LIMIT_DEPOSIT,
    MAXIMUM_DAILY,
    MAXIMUM_WEEKLY,
    MAXIMUM_MONTHLY,
    ACTIVE,
    UPDATE_DATE,
    FK_DATAUSER
  )
  VALUES
  (
    1,12000,80000,
    250000,
    'Y',
    '29/11/2019',
    '1'
  ) ;
SELECT * FROM LIMIT_DEPOSIT;

CREATE TABLE BET
  (
    ID            INT GENERATED ALWAYS AS IDENTITY,
    ID_BET        NUMBER(10) NOT NULL,
    CREATION_DATE TIMESTAMP,
    TOTAL_VALUE FLOAT,
    TOTAL_PROFIT FLOAT,
    STATUS VARCHAR(10),
    CONSTRAINT CK_VALIDATE_STATUS CHECK(STATUS = 'ABIERTA'
  OR STATUS                                    = 'GANADA'
  OR STATUS                                    = 'PERDIDA'
  OR STATUS                                    = 'VENDIDA'
  OR STATUS                                    = 'CANCELADA'
  OR STATUS                                    = 'REEMBOLSADA'
  OR STATUS                                    = 'INVALIDA'
  OR STATUS                                    = 'RECHAZADO'
  OR STATUS                                    = 'PERDIDO'
  OR STATUS                                    = 'PARTE-APROBADA'),
    ACTIVE      VARCHAR2(1) NOT NULL,
    FK_DATAUSER INT,
    CONSTRAINT PK_DATAUSER PRIMARY KEY (ID_BET),
    FOREIGN KEY (FK_DATAUSER) REFERENCES DATAUSER (ID_USER)
  )
  TABLESPACE BET_ITM;
INSERT
INTO BET
  (
    ID_BET,
    CREATION_DATE,
    TOTAL_VALUE,
    TOTAL_PROFIT,
    STATUS,
    ACTIVE,
    FK_DATAUSER
  )
  VALUES
  (
    1,
    '27/11/2019',
    800000,
    120000,
    'GANADA',
    'Y',
    '1'
  ) ;
SELECT * FROM BET;

CREATE TABLE BET_CATEGORY1
  (
    ID              INT GENERATED ALWAYS AS IDENTITY,
    ID_BET_CATEGORY NUMBER(10) PRIMARY KEY NOT NULL,
    NAME_CATEGORY   VARCHAR(100) NOT NULL,
    CONSTRAINT CK_NAME_CATEGORY CHECK(NAME_CATEGORY = 'MAS/MENOS(1,5)'
  OR NAME_CATEGORY                                  = 'MAS/MENOS(0,5)'
  OR NAME_CATEGORY                                  = 'MAS/MENOS(2,5)'
  OR NAME_CATEGORY                                  = 'MAS/MENOS(3,5)'
  OR NAME_CATEGORY                                  = '¿AMBOS ANOTARAN GOL?'
  OR NAME_CATEGORY                                  = '¿QUIEN GANA EL 1ER TIEMPO'
  OR NAME_CATEGORY                                  = '¿QUIEN GANA EL 2DO TIEMPO'
  OR NAME_CATEGORY                                  = '¿HAY POR LO MENOS UN GOL EN CADA TIEMPO?' ),
    ACTIVE VARCHAR2(1) NOT NULL
  )
  TABLESPACE BET_ITM;
INSERT
INTO BET_CATEGORY1
  (
    ID_BET_CATEGORY,
    NAME_CATEGORY,
    ACTIVE
  )
  VALUES
  (
    1,
    'MAS/MENOS(3,5)',
    'Y'
  ) ;
SELECT * FROM BET_CATEGORY1;

CREATE TABLE MATCH_
  (
    ID         INT GENERATED ALWAYS AS IDENTITY,
    ID_MATCH   NUMBER(10) PRIMARY KEY NOT NULL,
    TEAM1      VARCHAR2(150) NOT NULL,
    TEAM2      VARCHAR2(150) NOT NULL,
    MATCH_DATE TIMESTAMP NOT NULL,
    STATUS     VARCHAR2(10) NOT NULL,
    TOTAL_GOAL INT NOT NULL CONSTRAINT CK_NO_NEGATIVE_TG CHECK(TOTAL_GOAL >= 0),
    CONSTRAINT CK_MAY_GOALS CHECK(TOTAL_GOAL                              >= (TOTAL_GOAL_TEAM1+ TOTAL_GOAL_TEAM2)),
    GOAL_TEAM1_HALFTIME INT,
    CONSTRAINT CK_NO_NEGATIVE_HT1 CHECK(GOAL_TEAM1_HALFTIME >= 0),
    GOAL_TEAM2_HALFTIME INT,
    CONSTRAINT CK_NO_NEGATIVE_HT2 CHECK(GOAL_TEAM2_HALFTIME >= 0),
    TOTAL_GOAL_TEAM1 INT,
    CONSTRAINT CK_MAY_HT1 CHECK(TOTAL_GOAL_TEAM1 >= GOAL_TEAM1_HALFTIME),
    TOTAL_GOAL_TEAM2 INT,
    CONSTRAINT CK_MAY_HT2 CHECK(TOTAL_GOAL_TEAM2 >= GOAL_TEAM2_HALFTIME),
    ACTIVE VARCHAR2(1) NOT NULL
  )
  TABLESPACE BET_ITM;
INSERT
INTO MATCH_
  (
    ID_MATCH,
    TEAM1,
    TEAM2,
    MATCH_DATE,
    STATUS,
    TOTAL_GOAL,
    GOAL_TEAM1_HALFTIME,
    GOAL_TEAM2_HALFTIME,
    TOTAL_GOAL_TEAM1,
    TOTAL_GOAL_TEAM2,
    ACTIVE
  )
  VALUES
  (
    1,
    'REAL MADRID)',
    'BARCELONA',
    '12/12/2019',
    'IN LIVE',
    7,1,3,4,3,
    'Y'
  ) ;
SELECT * FROM MATCH_;

CREATE TABLE QUOTA_MATCH
  (
    ID             INT GENERATED ALWAYS AS IDENTITY,
    ID_QUOTA_MATCH NUMBER(10) NOT NULL,
    QUOTA_1 FLOAT NOT NULL,
    CONSTRAINT CK_QUOTA_1 CHECK(QUOTA_1 >=1 ),
    QUOTA_2 FLOAT,
    CONSTRAINT CK_QUOTA_2 CHECK(QUOTA_2>=1 ),
    QUOTA_3 FLOAT,
    CONSTRAINT CK_QUOTA_3 CHECK(QUOTA_3 >=1 ),
    WINNER_QUOTA    INT,
    ACTIVE          VARCHAR2(1),
    FK_MATCH        INT NOT NULL,
    FK_BET_CATEGORY INT,
    CONSTRAINT PK_ID_QUOTA_MATCH1 PRIMARY KEY(ID_QUOTA_MATCH),
    FOREIGN KEY(FK_MATCH) REFERENCES MATCH_(ID_MATCH),
    FOREIGN KEY(FK_BET_CATEGORY) REFERENCES BET_CATEGORY1(ID_BET_CATEGORY)
  )
  TABLESPACE BET_ITM;
INSERT
INTO QUOTA_MATCH
  (
    ID_QUOTA_MATCH,
    QUOTA_1,
    QUOTA_2,
    QUOTA_3,
    WINNER_QUOTA,
    ACTIVE,
    FK_MATCH,
    FK_BET_CATEGORY
  )
  VALUES
  (
    1,
    2.2,
    1.3,
    2.3,
    2,
    'Y',
    1,1
  ) ;
SELECT * FROM QUOTA_MATCH;

CREATE TABLE BET_DETAIL
  (
    ID            INT GENERATED ALWAYS AS IDENTITY,
    ID_BET_DETAIL NUMBER(10) NOT NULL,
    BET_QUOTA FLOAT NOT NULL,
    CONSTRAINT CK_BET_QUOTA CHECK(BET_QUOTA>=0),
    BET_VALUE FLOAT NOT NULL,
    CONSTRAINT CK_BET_VALUE CHECK(BET_VALUE>=0),
    STATUS         VARCHAR(10) NOT NULL,
    ACTIVE         VARCHAR2(1) NOT NULL,
    FK_QUOTA_MATCH INT NOT NULL,
    FK_BET         INT NOT NULL,
    CONSTRAINT PK_ID_BET_DETAIL PRIMARY KEY(ID_BET_DETAIL),
    FOREIGN KEY(FK_QUOTA_MATCH) REFERENCES QUOTA_MATCH(ID_QUOTA_MATCH),
    FOREIGN KEY(FK_BET) REFERENCES BET(ID_BET)
  )
  TABLESPACE BET_ITM;
INSERT
INTO BET_DETAIL
  (
    ID_BET_DETAIL,
    BET_QUOTA,
    BET_VALUE,
    STATUS,
    ACTIVE,
    FK_QUOTA_MATCH,
    FK_BET
  )
  VALUES
  (
    1,45000,20000,
    'PROGRESS',
    'Y',
    1,1
  ) ;
SELECT * FROM BET_DETAIL;

CREATE SEQUENCE SEQ_TRANSACION_ID;--SECUENCIA CREADA
CREATE SEQUENCE SEQ_DEPOSIT_ID; --SECUENCIA CREADA
  CREATE TABLE TRANSACTIONS
    (
      ID                INT GENERATED ALWAYS AS IDENTITY,
      ID_TRANSACTIONS   NUMBER(10) NOT NULL,
      DESCRIPTIONS      VARCHAR2(200) NOT NULL,
      TYPE_TRANSACTIONS VARCHAR2(100),
      STATUS            VARCHAR(10),
      TRANSACTION_VALUE FLOAT,
      CONSTRAINT CK_TRANSACTION_VALUE CHECK(TRANSACTION_VALUE>=0),
      ACTIVE  VARCHAR2(1) NOT NULL,
      FK_USER INT NOT NULL,
      CONSTRAINT PK_TRANSACTIONS PRIMARY KEY(ID_TRANSACTIONS),
      FOREIGN KEY(FK_USER) REFERENCES DATAUSER(ID_USER)
    )
    TABLESPACE BET_ITM;
  INSERT
  INTO TRANSACTIONS
    (
      ID_TRANSACTIONS,
      DESCRIPTIONS,
      TYPE_TRANSACTIONS,
      STATUS,
      TRANSACTION_VALUE,
      ACTIVE,
      FK_USER
    )
    VALUES
    (
      1,
      'SUSCCESSFULLY',
      'PAYMENT',
      'SUSCCESS',
      450000,
      'F',
      1
    ) ;
    
 -- VISTA 1
  /*Sumar el valor ganado de todas las apuestas de los usuarios que están en
  estado ganado de aquellos partidos asociados a las apuestas que se efectuaron 
  en el trancurso de la semana y mostrarlas ordenadas por el valor más alto; 
  El nombre de la vista será "GANADORES_SEMANALES" y tendrá dos columnas:
  nombre completo y valor acumulado.*/
  
  CREATE VIEW GANADORES_SEMANALES AS
  SELECT DOCUMENTOUSUARIO.FIRSTNAME
    ||' '
    ||DOCUMENTOUSUARIO.LASTNAME AS NOMBRE,
    SUM(APUESTA.TOTAL_PROFIT)   AS VALOR_ACUMULADO
  FROM MATCH_ PARTIDO
  INNER JOIN QUOTA_MATCH CUOTAPARTIDO
  ON CUOTAPARTIDO.FK_MATCH = PARTIDO.ID_MATCH
  INNER JOIN BET_DETAIL DETALLEAPUESTA
  ON DETALLEAPUESTA.FK_QUOTA_MATCH = CUOTAPARTIDO.ID_QUOTA_MATCH
  INNER JOIN BET APUESTA
  ON APUESTA.ID_BET = DETALLEAPUESTA.FK_BET
  INNER JOIN DATAUSER DATOSUSUARIOS
  ON DATOSUSUARIOS.ID_USER = APUESTA.FK_DATAUSER
  INNER JOIN DOCUMENT_USER DOCUMENTOUSUARIO
  ON DOCUMENTOUSUARIO.ID_DOCUMENT = DATOSUSUARIOS.FK_DOCUMENT
  WHERE PARTIDO.MATCH_DATE BETWEEN TRUNC(sysdate, 'DAY') AND TRUNC(sysdate, 'DAY')+6
  AND APUESTA.STATUS ='GANADA'
  GROUP BY DOCUMENTOUSUARIO.FIRSTNAME
    ||' '
    ||DOCUMENTOUSUARIO.LASTNAME
  ORDER BY VALOR_ACUMULADO DESC;
  SELECT TRUNC(sysdate, 'MONTH') start_of_the_week,
    TRUNC(sysdate, 'DAY')+6 end_of_the_week
  FROM dual
  SELECT * FROM DATAUSER;
  SELECT * FROM DOCUMENT_USER;
  
  --VISTA 3 
  /*Nombre de la vista: RESUMEN_APUESTAS. Esta vista mostrará el resumen de cada
  apuesta efectuada en el sistema, la información de la siguiente imagen
  corresponderá a cada columna (Omitir la siguiente columna Pago máx. incl.
  5% bono (293.517,58 $)). La idea es que cuando se llame la vista, muestre
  la información únicamente de esa apuesta en particular:
  COLUMNAS:  NÙMERO DE APUESTAS,  VALOR TOTAL DE APUESTAS  MÀXIMO TOTAL CUOTA
  VALOR PAGADO.*/
  
  CREATE VIEW RESUMEN_APUESTAS  AS
  SELECT FK_BET                 AS ID,
    COUNT(1)                    AS NUMERO_APUESTAS,
    SUM (BET_VALUE)             AS VALOR_TOTAL_APUESTAS,
    MAX (BET_QUOTA)             AS MAXIMO_TOTAL_CUOTA,
    SUM (APUESTAS.TOTAL_PROFIT) AS VALOR_PAGADO
  FROM BET_DETAIL DETALLE_APUESTA
  INNER JOIN BET APUESTAS
  ON DETALLE_APUESTA.FK_BET = APUESTAS.ID_BET
  GROUP BY FK_BET;
  
  --VISTA 4
  /*Para la siguiente vista deberán alterar el manejo de sesiones de usuario,
  el sistema deberá guardar el timestamp de la hora de sesión y el
  timestamp del fin de sesión, si el usuario tiene el campo fin de
  sesión en null, significa que la sesión está activa. Crear una
  vista que traiga las personas que tienen una sesión activa,
  ordenado por la hora de inicio de sesión, mostrando las personas
  que más tiempo llevan activas; adicional, deberá tener una columna
  que calcule cuántas horas lleva en el sistema con respecto a la hora actual,
  la siguiente columna será la cantidad de horas seleccionada en las
  preferencias de usuario, finalmente, habrá una columna que reste
  cuánto tiempo le falta para que se cierre la sesión.
  (si aparece un valor negativo, significa que el usuario excedió el tiempo en el sistema)*/
  
  CREATE VIEW TIEMPO_CONEXION AS
  SELECT LOGIN.ID_LOGIN,
    DOCUMENTOUSUARIO.FIRSTNAME
    ||' '
    ||DOCUMENTOUSUARIO.LASTNAME AS NOMBRE,
    extract( DAY FROM (SYSTIMESTAMP - LOGIN.INITIAL_HOUR ) )*24                               --*60
                                    +extract( HOUR FROM (SYSTIMESTAMP - LOGIN.INITIAL_HOUR ) )--*60 +
    --extract( MINUTE from (SYSTIMESTAMP - LOGIN.INITIAL_HOUR ) )
    AS TIEMPO_CONEXION,
    CLOSE_SESSION - (extract( DAY FROM (SYSTIMESTAMP - LOGIN.INITIAL_HOUR ) )*24 --*60
                  +extract( HOUR FROM (SYSTIMESTAMP - LOGIN.INITIAL_HOUR ) ))    --*60 +
    --extract( MINUTE from (SYSTIMESTAMP - LOGIN.INITIAL_HOUR ) )
    AS TIEMPO_FALTANTE
  FROM LOGIN
  INNER JOIN DATAUSER DATOSUSUARIO
  ON LOGIN.FK_USER = DATOSUSUARIO.ID_USER
  INNER JOIN DOCUMENT_USER DOCUMENTOUSUARIO
  ON DOCUMENTOUSUARIO.ID_DOCUMENT = DATOSUSUARIO.FK_DOCUMENT
  WHERE END_HOUR                 IS NULL
  ORDER BY INITIAL_HOUR ASC
  
 --PROCEDIMIENTO 1
/*Crear una función que reciba un argumento de tipo número,
este representará el id de un usuario; la función retornará TRUE
si el usuario se encuentra logueado en el sistema.
(Usar esta función en todos los procedimientos donde
se requiera validar que el usuario tenga una sesión activa.)*/
CREATE OR REPLACE FUNCTION FNC_USER_LOGUIN(
    ID IN NUMBER )
  RETURN VARCHAR2
AS
  LOGUEADO NUMBER;
BEGIN
  BEGIN
    <<CONSULTA_USUARIO_LOGUEADO>>
    SELECT COUNT(*)
    INTO LOGUEADO
    FROM LOGIN
    WHERE END_HOUR IS NULL
    AND FK_USER     = ID;
  END;
IF LOGUEADO >0 THEN
  RETURN 'TRUE';
END IF;
RETURN 'FALSE';
END FNC_USER_LOGUIN;

--PROCEDIMIENTO 2
/*Crear un procedimiento almacenado que reciba el nombre de la tabla y el id 
del registro que se desea actualizar, la idea de este procedimiento es que
active el soft deletion de dicho registro ubicado en dicha tabla. 
Deberá tener manejo de excepciones dado el caso que el nombre de la tabla
y/o el id no existan. Nota: Usar (EXECUTE IMMEDIATE)[https://docs.oracle.com/
cd/B19306_01/appdev.102/b14261/dynamic.htm#CHDGJEGD]*/

CREATE OR REPLACE PROCEDURE PCN_PRUEBA 
(
  NOMBRE_TABLA IN VARCHAR2 
, ID_REGISTRO IN NUMBER 
) AS 
BEGIN
 EXECUTE IMMEDIATE 'UPDATE '||NOMBRE_TABLA ||' set active = ''N'' where id = :id' using ID_REGISTRO;
END PCN_PRUEBA;


--PROCEDIMIENTO 5
/*Crear un procedimiento que permita realizar un depósito,
similar al procedimiento anterior, deberá validar los posibles
casos para que se apruebe / se rechace esta transacción. Ejemplo,
validar los montos mínimos y máximos para cada medio de pago.
Si hay alguna novedad guardar el motivo por el cual fue rechazado.
El sistema deberá validar los límites de depósitos para cada usuario.*/
CREATE OR REPLACE PROCEDURE PCN_DEPOSITAR(
    ID_USER       IN NUMBER,
    ID_CLASS      IN NUMBER,
    VALUE_DEPOSIT IN NUMBER )
AS
  ESTADO         VARCHAR2(10):='SUCCESS';
  CONTADOR       NUMBER;
  OBSERVACION    VARCHAR2(200):='SUCCESSFULL';
  ACUM_DIARIO    NUMBER;
  ACUM_SEMANA    NUMBER;
  ACUM_MES       NUMBER;
  LIMITE_DIARIO  NUMBER;
  LIMITE_SEMANA  NUMBER;
  LIMITE_MES     NUMBER;
  ID_TRANSACTION NUMBER;
BEGIN
  --Validar lìmite por medio de pago.
  SELECT COUNT(1)
  INTO CONTADOR
  FROM PAYMENT_CLASS
  WHERE ACTIVE       = 'Y'
  AND ID_PAY_CLASS   = ID_CLASS
  AND MINIMUM_VALUE <= VALUE_DEPOSIT;
  IF CONTADOR        = 0 THEN
    ESTADO          := 'REJECTED';
    OBSERVACION     := 'VALOR DEL DEPÒSITO ES MENOR AL MÌNIMO PERMITIDO';
  END IF;
  SELECT COUNT(1)
  INTO CONTADOR
  FROM PAYMENT_CLASS
  WHERE ACTIVE        = 'Y'
  AND ID_PAY_CLASS    = ID_CLASS
  AND MAXIIMUM_VALUE >= VALUE_DEPOSIT;
  IF CONTADOR         = 0 THEN
    ESTADO           := 'REJECTED';
    OBSERVACION      := 'VALOR DEL DEPÒSITO ES MAYOR AL MÀXIMO PERMITIDO';
  END IF;
  BEGIN
    SELECT MAXIMUM_DAILY,
      MAXIMUM_WEEKLY,
      MAXIMUM_MONTHLY
    INTO LIMITE_DIARIO,
      LIMITE_SEMANA,
      LIMITE_MES
    FROM LIMIT_DEPOSIT
    WHERE FK_DATAUSER = ID_USER
    AND ACTIVE        ='Y';
    SELECT SUM(TRANSACTIONS.TRANSACTION_VALUE)
    INTO ACUM_DIARIO
    FROM DEPOSIT
    INNER JOIN TRANSACTIONS
    ON DEPOSIT.FK_TRANSACTION             = TRANSACTIONS.ID_TRANSACTIONS
    WHERE DEPOSIT.FK_USER                 = ID_USER
    AND DEPOSIT.STATUS                    = 'EXITOSO'
    AND DEPOSIT.TRANSACTION_DATE          > TRUNC(SYSDATE); --TRUNC LE QUITA LAS HORA A LAS FECHAS
    IF NVL(ACUM_DIARIO,0) + VALUE_DEPOSIT > LIMITE_DIARIO THEN
      ESTADO                             := 'REJECTED';
      OBSERVACION                        := 'VALOR DEL DEPÒSITO ES MAYOR AL MÀXIMO PERMITIDO DIARIO POR EL USUARIO';
    END IF;
    SELECT SUM(TRANSACTIONS.TRANSACTION_VALUE)
    INTO ACUM_SEMANA
    FROM DEPOSIT
    INNER JOIN TRANSACTIONS
    ON DEPOSIT.FK_TRANSACTION             = TRANSACTIONS.ID_TRANSACTIONS
    WHERE DEPOSIT.FK_USER                 = ID_USER
    AND DEPOSIT.STATUS                    = 'EXITOSO'
    AND DEPOSIT.TRANSACTION_DATE          > TRUNC(sysdate, 'DAY'); --TRUNC LE QUITA LAS HORA A LAS FECHAS
    IF NVL(ACUM_SEMANA,0) + VALUE_DEPOSIT > LIMITE_SEMANA THEN
      ESTADO                             := 'REJECTED';
      OBSERVACION                        := 'VALOR DEL DEPÒSITO ES MAYOR AL MÀXIMO PERMITIDO SEMANAL POR EL USUARIO';
    END IF;
    SELECT SUM(TRANSACTIONS.TRANSACTION_VALUE)
    INTO ACUM_MES
    FROM DEPOSIT
    INNER JOIN TRANSACTIONS
    ON DEPOSIT.FK_TRANSACTION          = TRANSACTIONS.ID_TRANSACTIONS
    WHERE DEPOSIT.FK_USER              = ID_USER
    AND DEPOSIT.STATUS                 = 'EXITOSO'
    AND DEPOSIT.TRANSACTION_DATE       > TRUNC(sysdate, 'MONTH'); --TRUNC LE QUITA LAS HORA A LAS FECHAS
    IF NVL(ACUM_MES,0) + VALUE_DEPOSIT > LIMITE_MES THEN
      ESTADO                          := 'REJECTED';
      OBSERVACION                     := 'VALOR DEL DEPÒSITO ES MAYOR AL MÀXIMO PERMITIDO MENSUAL POR EL USUARIO';
    END IF;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    NULL;
  END;
  ID_TRANSACTION := SEQ_TRANSACION_ID.nextval;
  INSERT
  INTO TRANSACTIONS
    (
      ID_TRANSACTIONS,
      DESCRIPTIONS,
      TYPE_TRANSACTIONS,
      STATUS,
      TRANSACTION_VALUE,
      ACTIVE,
      FK_USER
    )
    VALUES
    (
      ID_TRANSACTION,
      OBSERVACION,
      'DEPOSITO',
      ESTADO,
      VALUE_DEPOSIT,
      'Y',
      ID_USER
    );
  INSERT
  INTO DEPOSIT
    (
      ID_DEPOSIT,
      TRANSACTION_DATE,
      STATUS,
      ACTIVE,
      FK_USER,
      FK_PAY_CLASS,
      FK_TRANSACTION
    )
    VALUES
    (
      SEQ_DEPOSIT_ID.nextval,
      SYSDATE,
      DECODE( ESTADO,'SUCCESS' ,'EXITOSO', 'RECHAZADA'),
      'Y',
      ID_USER,
      ID_CLASS,
      ID_TRANSACTION
    );
END PCN_DEPOSITAR;  
 --FIN PROCEDIMIENTO 5

 --PROCEDIMIENTO 6
    /*Crear un procedimiento almacenado que invoque la vista de sesiones activas
    y coloque el campo fin de sesión con el timestamp actual,
    esto aplicará solo para aquellos usuarios que han excedido el
    tiempo en el sistema dependiendo de sus preferencias personales.*/
    CREATE
  OR REPLACE PROCEDURE PCN_CERRAR_SESION AS BEGIN
  UPDATE LOGIN
  SET END_HOUR    = SYSTIMESTAMP
  WHERE ID_LOGIN IN
    (SELECT ID_LOGIN FROM TIEMPO_CONEXION WHERE TIEMPO_FALTANTE <= 0
    );
END PCN_CERRAR_SESION;

   


--BORRAR TABLAS
DROP TABLE TRANSACTIONS;
DROP TABLE BET_DETAIL;
DROP TABLE QUOTA_MATCH;
DROP TABLE MATCH_;
DROP TABLE BET_CATEGORY1;
DROP TABLE BET;
DROP TABLE LIMIT_DEPOSIT;
DROP TABLE DEPOSIT;
DROP TABLE PAYMENT_CLASS;
DROP TABLE PREFERENCES;
DROP TABLE BONUS;
DROP TABLE PROOF;
DROP TABLE WITHDRAW;
DROP TABLE LOGIN;
DROP TABLE DATAUSER;
DROP TABLE DOCUMENT_USER;
DROP TABLE CITY;

